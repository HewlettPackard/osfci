# (c) Hewlett Packard Enterprise LP - 2020
#!/bin/bash

function check_requirements() {
	for i in jq openssl base64 curl
	do
		command=`which $i`
		if [ "$command" == "" ]
		then
			echo "Error: Please install $i or verify it is accessible through your default execution path variable"
			exit 1
		fi
	done
}

function help() {
   echo "build_firmware is a command line tool allowing you to build your OpenBMC or Linuxboot firmware from an OSFCI instance"
   echo ""
   echo "Mandatory options are:"
   echo "-f or --firmware <openbmc|linuxboot> : to select which firmware to download"
   echo "-g or --git : http address of a git repository"
   echo "-b or --branch : branch to use"
   exit 0
}

check_requirements

reuse="0"
keep="0"
waitServer="0"

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -g|--git)
    git="$2"
    shift # past argument
    shift # past value
    ;;
    -b|--branch)
    branch="$2"
    shift # past argument
    shift # past value
    ;;
    -f|--firmware)
    firmware="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    shift # past argument
    help
    exit 1
    ;;
esac
done

username=`cat $HOME/.osfci/auth | awk '{ print $1}'`

if [ "$firmware" == "" ]
then
echo "Error missing firmware parameter : -f|--firmware"
echo ""
help
fi

accessKey=`cat $HOME/.osfci/auth | awk '{ print $2 }'`
secretKey=`cat $HOME/.osfci/auth | awk '{ print $3 }'`
serverName=`cat $HOME/.osfci/credential.txt | sed 's/{//' | sed 's/}//' | awk -F"," '{ print $1 }' | awk -F":" '{ print $2 }' | sed 's/"//g'`

# We have to build now that we got a server
if [ "$firmware" == "linuxboot" ]
then
	command="buildbiosfirmware"
	machine="hpe/dl360gen10"
else
	if [ "$firmware" == "openbmc" ]
	then
		command="buildbmcfirmware"
		machine="dl360poc"
	fi
fi

dateFormatted=`TZ=GMT date -R`
relativePath="/ci/$command/$username"
contentType="text/plain"
stringToSign="PUT\n\n${contentType}\n${dateFormatted}\n${relativePath}"
signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${secretKey} -binary | base64`
curl -v -b $HOME/.osfci/$username.jar -d"$git $branch $machine 0" -X PUT \
-H "Host: osfci.tech" \
-H "mydate: ${dateFormatted}" \
-H "Content-Type: ${contentType}" \
-H "Authorization: OSF ${accessKey}:${signature}" \
"https://osfci.tech/ci/$command/$username"
# rm $TMPDIR/test.txt
echo "https://osfci.tech/ci/$command/$username"
exit 0

# This part is not yet developped

if [ "$keep" == "0" ]
then
# we have to exit only when the build is finished
# 
# We have to release the session
# We do not need to stop the power as this script doesn't turn it on
	curl -v -o $TMPDIR/test.txt -b $HOME/.osfci_cookies/$username.jar -X GET "https://osfci.tech/ci/stopServer/$serverName"
	rm $TMPDIR/test.txt
	rm $HOME/.osfci_cookies/*
fi
